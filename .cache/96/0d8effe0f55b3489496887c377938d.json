{"id":"../node_modules/@azure/core-tracing/dist-esm/src/interfaces.js","dependencies":[{"name":"C:\\Users\\hp\\Downloads\\HK2_21-22\\Design Pattern\\Demo\\typescript-arkanoid\\Chicken-TS\\node_modules\\@azure\\core-tracing\\dist-esm\\src\\interfaces.js.map","includedInParent":true,"mtime":1655014965841},{"name":"C:\\Users\\hp\\Downloads\\HK2_21-22\\Design Pattern\\Demo\\typescript-arkanoid\\Chicken-TS\\package.json","includedInParent":true,"mtime":1655023849936},{"name":"C:\\Users\\hp\\Downloads\\HK2_21-22\\Design Pattern\\Demo\\typescript-arkanoid\\Chicken-TS\\node_modules\\@azure\\core-tracing\\package.json","includedInParent":true,"mtime":1655014965690},{"name":"@opentelemetry/api","loc":{"line":3,"column":55},"parent":"C:\\Users\\hp\\Downloads\\HK2_21-22\\Design Pattern\\Demo\\typescript-arkanoid\\Chicken-TS\\node_modules\\@azure\\core-tracing\\dist-esm\\src\\interfaces.js","resolved":"C:\\Users\\hp\\Downloads\\HK2_21-22\\Design Pattern\\Demo\\typescript-arkanoid\\Chicken-TS\\node_modules\\@opentelemetry\\api\\build\\esm\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSpan = getSpan;\nexports.setSpan = setSpan;\nexports.setSpanContext = setSpanContext;\nexports.getSpanContext = getSpanContext;\nexports.isSpanContextValid = isSpanContextValid;\nexports.getTracer = getTracer;\nexports.SpanStatusCode = exports.context = exports.SpanKind = void 0;\n\nvar _api = require(\"@opentelemetry/api\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The kind of span.\n */\nvar SpanKind;\nexports.SpanKind = SpanKind;\n\n(function (SpanKind) {\n  /** Default value. Indicates that the span is used internally. */\n  SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n\n  SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n\n  SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n\n  SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n\n  SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (exports.SpanKind = SpanKind = {}));\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\n\n\nfunction getSpan(context) {\n  return _api.trace.getSpan(context);\n}\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\n\n\nfunction setSpan(context, span) {\n  return _api.trace.setSpan(context, span);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\n\n\nfunction setSpanContext(context, spanContext) {\n  return _api.trace.setSpanContext(context, spanContext);\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\n\n\nfunction getSpanContext(context) {\n  return _api.trace.getSpanContext(context);\n}\n/**\n * Returns true of the given {@link SpanContext} is valid.\n * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.\n *\n * @param context - the {@link SpanContext} to validate.\n *\n * @returns true if the {@link SpanContext} is valid, false otherwise.\n */\n\n\nfunction isSpanContextValid(context) {\n  return _api.trace.isSpanContextValid(context);\n}\n\nfunction getTracer(name, version) {\n  return _api.trace.getTracer(name || \"azure/core-tracing\", version);\n}\n/** Entrypoint for context API */\n\n\nvar context = _api.context;\n/** SpanStatusCode */\n\nexports.context = context;\nvar SpanStatusCode;\nexports.SpanStatusCode = SpanStatusCode;\n\n(function (SpanStatusCode) {\n  /**\n   * The default status.\n   */\n  SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n\n  SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n  /**\n   * The operation contains an error.\n   */\n\n  SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/interfaces.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":17,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":88,"column":0},"generated":{"line":19,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":22,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":22,"column":4}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":22,"column":12}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":25,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":25,"column":1}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":25,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":25,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":25,"column":21}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":26,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":10}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":30}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":36}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":27,"column":49}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":94,"column":2},"generated":{"line":28,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":10}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":28}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":29}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":33}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":37}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":33,"column":45}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":34,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":10}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":28}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":29}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":33}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":37}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":39,"column":45}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":40,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":10}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":30}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":36}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":46,"column":49}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":110,"column":2},"generated":{"line":47,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":10}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":30}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":36}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":53,"column":49}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":116,"column":1},"generated":{"line":54,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":54,"column":1}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":54,"column":3}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":54,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":54,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":54,"column":43}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":54,"column":46}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":54,"column":48}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":54,"column":49}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":169,"column":0},"generated":{"line":55,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":6},"generated":{"line":62,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":16},"generated":{"line":62,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":6},"generated":{"line":62,"column":16}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":24},"generated":{"line":62,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":6},"generated":{"line":62,"column":24}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":40},"generated":{"line":62,"column":26}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":2},"generated":{"line":63,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":9},"generated":{"line":63,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":17},"generated":{"line":63,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":9},"generated":{"line":63,"column":27}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":25},"generated":{"line":63,"column":28}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":9},"generated":{"line":63,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":2},"generated":{"line":63,"column":36}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":176,"column":1},"generated":{"line":64,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":178,"column":0},"generated":{"line":65,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":6},"generated":{"line":73,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":16},"generated":{"line":73,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":6},"generated":{"line":73,"column":16}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":24},"generated":{"line":73,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":6},"generated":{"line":73,"column":24}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":42},"generated":{"line":73,"column":26}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":6},"generated":{"line":73,"column":30}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":52},"generated":{"line":73,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":2},"generated":{"line":74,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":74,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":17},"generated":{"line":74,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":74,"column":27}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":25},"generated":{"line":74,"column":28}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":74,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":34},"generated":{"line":74,"column":37}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":74,"column":41}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":2},"generated":{"line":74,"column":42}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":186,"column":1},"generated":{"line":75,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":188,"column":0},"generated":{"line":76,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":6},"generated":{"line":85,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":16},"generated":{"line":85,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":6},"generated":{"line":85,"column":23}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":31},"generated":{"line":85,"column":24}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":6},"generated":{"line":85,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":49},"generated":{"line":85,"column":33}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":6},"generated":{"line":85,"column":44}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":73},"generated":{"line":85,"column":46}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":2},"generated":{"line":86,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":86,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":17},"generated":{"line":86,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":86,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":32},"generated":{"line":86,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":86,"column":42}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":41},"generated":{"line":86,"column":44}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":86,"column":55}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":2},"generated":{"line":86,"column":56}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":197,"column":1},"generated":{"line":87,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":199,"column":0},"generated":{"line":88,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":6},"generated":{"line":95,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":16},"generated":{"line":95,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":6},"generated":{"line":95,"column":23}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":31},"generated":{"line":95,"column":24}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":6},"generated":{"line":95,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":47},"generated":{"line":95,"column":33}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":2},"generated":{"line":96,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":96,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":17},"generated":{"line":96,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":96,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":96,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":96,"column":42}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":2},"generated":{"line":96,"column":43}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":206,"column":1},"generated":{"line":97,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":218,"column":0},"generated":{"line":98,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":108,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":16},"generated":{"line":108,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":108,"column":27}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":35},"generated":{"line":108,"column":28}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":108,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":55},"generated":{"line":108,"column":37}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":2},"generated":{"line":109,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":9},"generated":{"line":109,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":17},"generated":{"line":109,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":9},"generated":{"line":109,"column":38}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":36},"generated":{"line":109,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":9},"generated":{"line":109,"column":46}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":2},"generated":{"line":109,"column":47}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":228,"column":1},"generated":{"line":110,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":6},"generated":{"line":112,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":16},"generated":{"line":112,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":6},"generated":{"line":112,"column":18}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":26},"generated":{"line":112,"column":19}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":6},"generated":{"line":112,"column":23}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":41},"generated":{"line":112,"column":25}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":6},"generated":{"line":112,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":57},"generated":{"line":112,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":2},"generated":{"line":113,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":9},"generated":{"line":113,"column":9}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":17},"generated":{"line":113,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":9},"generated":{"line":113,"column":29}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":27},"generated":{"line":113,"column":30}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":31},"generated":{"line":113,"column":34}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":35},"generated":{"line":113,"column":38}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":9},"generated":{"line":113,"column":58}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":57},"generated":{"line":113,"column":60}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":9},"generated":{"line":113,"column":67}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":2},"generated":{"line":113,"column":68}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":240,"column":1},"generated":{"line":114,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":242,"column":0},"generated":{"line":115,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":7},"generated":{"line":118,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":13},"generated":{"line":118,"column":4}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":20},"generated":{"line":118,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":35},"generated":{"line":118,"column":14}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":7},"generated":{"line":118,"column":26}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":119,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":122,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":122,"column":4}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":122,"column":18}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":125,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":125,"column":1}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":125,"column":11}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":125,"column":25}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":125,"column":27}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":247,"column":2},"generated":{"line":126,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":16}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":40}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":43}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":44}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":45}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":48}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":129,"column":55}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":251,"column":2},"generated":{"line":130,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":16}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":36}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":37}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":40}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":41}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":42}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":45}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":135,"column":49}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":256,"column":2},"generated":{"line":136,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":2}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":16}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":31}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":32}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":39}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":40}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":43}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":44}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":45}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":48}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":140,"column":55}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":260,"column":1},"generated":{"line":141,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":141,"column":1}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":141,"column":3}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":141,"column":17}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":141,"column":47}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":141,"column":61}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":141,"column":64}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":141,"column":66}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":141,"column":67}}],"sources":{"../../src/interfaces.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { context as otContext, trace as otTrace } from \"@opentelemetry/api\";\n\n/**\n * A Tracer.\n */\nexport interface Tracer {\n  /**\n   * Starts a new {@link Span}. Start the span without setting it on context.\n   *\n   * This method does NOT modify the current Context.\n   *\n   * @param name - The name of the span\n   * @param options - SpanOptions used for span creation\n   * @param context - Context to use to extract parent\n   * @returns The newly created span\n   * @example\n   *     const span = tracer.startSpan('op');\n   *     span.setAttribute('key', 'value');\n   *     span.end();\n   */\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span;\n}\n\n/**\n * TraceState.\n */\nexport interface TraceState {\n  /**\n   * Create a new TraceState which inherits from this TraceState and has the\n   * given key set.\n   * The new entry will always be added in the front of the list of states.\n   *\n   * @param key - key of the TraceState entry.\n   * @param value - value of the TraceState entry.\n   */\n  set(key: string, value: string): TraceState;\n  /**\n   * Return a new TraceState which inherits from this TraceState but does not\n   * contain the given key.\n   *\n   * @param key - the key for the TraceState entry to be removed.\n   */\n  unset(key: string): TraceState;\n  /**\n   * Returns the value to which the specified key is mapped, or `undefined` if\n   * this map contains no mapping for the key.\n   *\n   * @param key - with which the specified value is to be associated.\n   * @returns the value to which the specified key is mapped, or `undefined` if\n   *     this map contains no mapping for the key.\n   */\n  get(key: string): string | undefined;\n  /**\n   * Serializes the TraceState to a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   *\n   * @returns the serialized string.\n   */\n  serialize(): string;\n}\n\n/**\n * Represents high resolution time.\n */\nexport declare type HrTime = [number, number];\n\n/**\n * Used to represent a Time.\n */\nexport type TimeInput = HrTime | number | Date;\n\n/**\n * The status for a span.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * The kind of span.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4\n}\n\n/**\n * An Exception for a Span.\n */\nexport declare type Exception =\n  | ExceptionWithCode\n  | ExceptionWithMessage\n  | ExceptionWithName\n  | string;\n\n/**\n * An Exception with a code.\n */\nexport interface ExceptionWithCode {\n  /** The code. */\n  code: string | number;\n  /** The name. */\n  name?: string;\n  /** The message. */\n  message?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a message.\n */\nexport interface ExceptionWithMessage {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message: string;\n  /** The name. */\n  name?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a name.\n */\nexport interface ExceptionWithName {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message?: string;\n  /** The name. */\n  name: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return otTrace.getSpan(context);\n}\n\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return otTrace.setSpan(context, span);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nexport function setSpanContext(context: Context, spanContext: SpanContext): Context {\n  return otTrace.setSpanContext(context, spanContext);\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return otTrace.getSpanContext(context);\n}\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport interface ContextAPI {\n  /**\n   * Get the currently active context\n   */\n  active(): Context;\n}\n\n/**\n * Returns true of the given {@link SpanContext} is valid.\n * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.\n *\n * @param context - the {@link SpanContext} to validate.\n *\n * @returns true if the {@link SpanContext} is valid, false otherwise.\n */\nexport function isSpanContextValid(context: SpanContext): boolean {\n  return otTrace.isSpanContextValid(context);\n}\n\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(): Tracer;\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(name: string, version?: string): Tracer;\nexport function getTracer(name?: string, version?: string): Tracer {\n  return otTrace.getTracer(name || \"azure/core-tracing\", version);\n}\n\n/** Entrypoint for context API */\nexport const context: ContextAPI = otContext;\n\n/** SpanStatusCode */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2\n}\n\n/**\n * An interface that represents a span. A span represents a single operation\n * within a trace. Examples of span might include remote procedure calls or a\n * in-process function calls to sub-components. A Trace has a single, top-level\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\n * may have children.\n *\n * Spans are created by the {@link Tracer.startSpan} method.\n */\nexport interface Span {\n  /**\n   * Returns the {@link SpanContext} object associated with this Span.\n   *\n   * Get an immutable, serializable identifier for this span that can be used\n   * to create new child spans. Returned SpanContext is usable even after the\n   * span ends.\n   *\n   * @returns the SpanContext object associated with this Span.\n   */\n  spanContext(): SpanContext;\n  /**\n   * Sets an attribute to the span.\n   *\n   * Sets a single Attribute with the key and value passed as arguments.\n   *\n   * @param key - the key for this attribute.\n   * @param value - the value for this attribute. Setting a value null or\n   *              undefined is invalid and will result in undefined behavior.\n   */\n  setAttribute(key: string, value: SpanAttributeValue): this;\n  /**\n   * Sets attributes to the span.\n   *\n   * @param attributes - the attributes that will be added.\n   *                   null or undefined attribute values\n   *                   are invalid and will result in undefined behavior.\n   */\n  setAttributes(attributes: SpanAttributes): this;\n  /**\n   * Adds an event to the Span.\n   *\n   * @param name - the name of the event.\n   * @param attributesOrStartTime -  the attributes that will be added; these are\n   *     associated with this event. Can be also a start time\n   *     if type is TimeInput and 3rd param is undefined\n   * @param startTime - start time of the event.\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    startTime?: TimeInput\n  ): this;\n  /**\n   * Sets a status to the span. If used, this will override the default Span\n   * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\n   * of previous calls to SetStatus on the Span.\n   *\n   * @param status - the SpanStatus to set.\n   */\n  setStatus(status: SpanStatus): this;\n  /**\n   * Marks the end of Span execution.\n   *\n   * Call to End of a Span MUST not have any effects on child spans. Those may\n   * still be running and can be ended later.\n   *\n   * Do not return `this`. The Span generally should not be used after it\n   * is ended so chaining is not desired in this context.\n   *\n   * @param endTime - the time to set as Span's end time. If not provided,\n   *     use the current time as the span's end time.\n   */\n  end(endTime?: TimeInput): void;\n  /**\n   * Returns the flag whether this span will be recorded.\n   *\n   * @returns true if this Span is active and recording information like events\n   *     with the `AddEvent` operation and attributes using `setAttributes`.\n   */\n  isRecording(): boolean;\n\n  /**\n   * Sets exception as a span event\n   * @param exception - the exception the only accepted values are string or Error\n   * @param time - the time to set as Span's event time. If not provided,\n   *     use the current time.\n   */\n  recordException(exception: Exception, time?: TimeInput): void;\n\n  /**\n   * Updates the Span name.\n   *\n   * This will override the name provided via {@link Tracer.startSpan}.\n   *\n   * Upon this update, any sampling behavior based on Span name will depend on\n   * the implementation.\n   *\n   * @param name - the Span name.\n   */\n  updateName(name: string): this;\n}\n\n/**\n * Shorthand enum for common traceFlags values inside SpanContext\n */\nexport const enum TraceFlags {\n  /** No flag set. */\n  NONE = 0x0,\n  /** Caller is collecting trace information. */\n  SAMPLED = 0x1\n}\n\n/**\n * A light interface that tries to be structurally compatible with OpenTelemetry\n */\nexport interface SpanContext {\n  /**\n   * UUID of a trace.\n   */\n  traceId: string;\n  /**\n   * UUID of a Span.\n   */\n  spanId: string;\n  /**\n   * https://www.w3.org/TR/trace-context/#trace-flags\n   */\n  traceFlags: number;\n  /**\n   * Tracing-system-specific info to propagate.\n   *\n   * The tracestate field value is a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\n   *\n   * Examples:\n   *     Single tracing system (generic format):\n   *         tracestate: rojo=00f067aa0ba902b7\n   *     Multiple tracing systems (with different formatting):\n   *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\n   */\n  traceState?: TraceState;\n}\n\n/**\n * Used to specify a span that is linked to another.\n */\nexport interface Link {\n  /** The {@link SpanContext} of a linked span. */\n  context: SpanContext;\n\n  /** A set of {@link SpanAttributes} on the link. */\n  attributes?: SpanAttributes;\n}\n\n/**\n * Attributes for a Span.\n */\nexport interface SpanAttributes {\n  /**\n   * Attributes for a Span.\n   */\n  [attributeKey: string]: SpanAttributeValue | undefined;\n}\n/**\n * Attribute values may be any non-nullish primitive value except an object.\n *\n * null or undefined attribute values are invalid and will result in undefined behavior.\n */\nexport declare type SpanAttributeValue =\n  | string\n  | number\n  | boolean\n  | Array<null | undefined | string>\n  | Array<null | undefined | number>\n  | Array<null | undefined | boolean>;\n\n/**\n * An interface that enables manual propagation of Spans\n */\nexport interface SpanOptions {\n  /**\n   * Attributes to set on the Span\n   */\n  attributes?: SpanAttributes;\n\n  /** {@link Link}s span to other spans */\n  links?: Link[];\n\n  /**\n   * The type of Span. Default to SpanKind.INTERNAL\n   */\n  kind?: SpanKind;\n\n  /**\n   * A manually specified start time for the created `Span` object.\n   */\n  startTime?: TimeInput;\n}\n\n/**\n * Tracing options to set on an operation.\n */\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  /**\n   * OpenTelemetry context to use for created Spans.\n   */\n  tracingContext?: Context;\n}\n\n/**\n * OpenTelemetry compatible interface for Context\n */\nexport interface Context {\n  /**\n   * Get a value from the context.\n   *\n   * @param key - key which identifies a context value\n   */\n  getValue(key: symbol): unknown;\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key - context key for which to set the value\n   * @param value - value to set for the given key\n   */\n  setValue(key: symbol, value: unknown): Context;\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key - context key for which to clear a value\n   */\n  deleteValue(key: symbol): Context;\n}\n"},"lineCount":null}},"error":null,"hash":"b0ff47168b7fba4aca3cde59518cb844","cacheData":{"env":{}}}